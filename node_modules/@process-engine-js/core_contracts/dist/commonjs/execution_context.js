"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuid = require("uuid");
const R = require("ramda");
class ExecutionContext {
    constructor(iamService, sessionData, tokenType, encryptedToken) {
        this.sessionData = undefined;
        this.tokenType = undefined;
        this.encryptedToken = undefined;
        this.entityCallStack = undefined;
        this._iamService = undefined;
        this._promotions = {};
        this._iamService = iamService;
        this.sessionData = sessionData;
        this.tokenType = tokenType;
        this.encryptedToken = encryptedToken;
        this.entityCallStack = {};
    }
    get iamService() {
        return this._iamService;
    }
    get isGuest() {
        return this.sessionData === undefined;
    }
    hasRole(role) {
        const roles = this.getRoles();
        return roles.indexOf(role) !== -1;
    }
    hasRoles(rolesToCheck) {
        const roles = this.getRoles();
        return rolesToCheck.filter((role) => {
            return roles.indexOf(role) === -1;
        }).length === 0;
    }
    promoteWith(role) {
        const promoteContext = uuid.v4();
        const roles = this.iamService.flattenRoles([role]);
        this._promotions[promoteContext] = roles;
        return promoteContext;
    }
    unpromote(promoteContext) {
        delete this._promotions[promoteContext];
    }
    getRoles() {
        const identityRoles = this._getIdentityRoles();
        const promotions = Object.keys(this._promotions);
        if (promotions.length > 0) {
            const roles = promotions.map(promotion => this._promotions[promotion]).reduce((prev, el) => R.union(prev, el), identityRoles);
            return roles;
        }
        return identityRoles;
    }
    getIdentity(context) {
        return this.iamService.getIdentity(context);
    }
    _getIdentityRoles() {
        if (this.isGuest) {
            const guest = this.iamService.getGuest();
            return guest.roles;
        }
        return this.sessionData && this.sessionData.roles && this.sessionData.roles.length > 0 ? this.sessionData.roles : [];
    }
}
exports.ExecutionContext = ExecutionContext;

//# sourceMappingURL=execution_context.js.map
