import {TokenType, ISessionStoreData, IIamService, IIdentity} from './interfaces';

import * as uuid from 'uuid';
import * as R from 'ramda';

export class ExecutionContext {

  public sessionData: any = undefined;
  public tokenType: TokenType = undefined;
  public encryptedToken: any = undefined;
  public entityCallStack: any = undefined;
  private _iamService: IIamService = undefined;
  private _promotions: any = {};

  constructor(iamService: IIamService, sessionData: ISessionStoreData, tokenType: TokenType, encryptedToken: any) {
    this._iamService = iamService;
    this.sessionData = sessionData;
    this.tokenType = tokenType;
    this.encryptedToken = encryptedToken;
    this.entityCallStack = {};
  }

  private get iamService(): IIamService {
    return this._iamService;
  }

  public get isGuest(): boolean {
    return this.sessionData === undefined;
  }

  public hasRole(role: string): boolean {
    const roles = this.getRoles();
    return roles.indexOf(role) !== -1;
  }

  public hasRoles(rolesToCheck: Array<string>): boolean {
    const roles = this.getRoles();
    return rolesToCheck.filter((role) => {
      return roles.indexOf(role) === -1;
    }).length === 0;
  }

  public promoteWith(role: string): string {
    const promoteContext: string = uuid.v4();

    const roles = this.iamService.flattenRoles([role]);
    
    this._promotions[promoteContext] = roles;

    return promoteContext;
  }

  public unpromote(promoteContext: string): void {
    delete this._promotions[promoteContext];
  }

  public getRoles(): Array<string> {
    const identityRoles = this._getIdentityRoles();
    const promotions = Object.keys(this._promotions);
    if (promotions.length > 0) {
      const roles = promotions.map(promotion => this._promotions[promotion]).reduce((prev, el) => R.union(prev, el), identityRoles);
      return roles;
    }
    return identityRoles;
  }

  public getIdentity(context: ExecutionContext): Promise<IIdentity> {
    return this.iamService.getIdentity(context);
  }

  private _getIdentityRoles() {
    if (this.isGuest) {
      const guest = this.iamService.getGuest();
      return guest.roles;
    }
    return this.sessionData && this.sessionData.roles && this.sessionData.roles.length > 0 ? this.sessionData.roles : [];
  }
}
