"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = require("crypto");
const BluebirdPromise = require("bluebird");
class EncryptionService {
    constructor() {
        this.config = undefined;
    }
    get encryptionKey() {
        return this.config.encryptionKey;
    }
    encrypt(value) {
        return new BluebirdPromise((resolve, reject) => {
            if (value === null || value === undefined) {
                resolve(value);
            }
            else {
                const keyBuffer = new Buffer(this.encryptionKey, 'utf8');
                const cipher = crypto.createCipher('aes-128-ctr', keyBuffer);
                const valueString = JSON.stringify(value);
                const valueBuffer = new Buffer(valueString);
                const encrypted = cipher.update(valueBuffer);
                const finalBuffer = Buffer.concat([encrypted, cipher.final()]);
                const result = finalBuffer.toString('hex');
                resolve(result);
            }
        });
    }
    decrypt(value) {
        return new BluebirdPromise((resolve, reject) => {
            if (value === null || value === undefined) {
                resolve(value);
            }
            else {
                const keyBuffer = new Buffer(this.encryptionKey, 'utf8');
                const decipher = crypto.createDecipher('aes-128-ctr', keyBuffer);
                const valueBuffer = new Buffer(value, 'hex');
                const decrypted = decipher.update(valueBuffer);
                const finalBuffer = Buffer.concat([decrypted, decipher.final()]);
                const finalString = finalBuffer.toString('utf8');
                const result = JSON.parse(finalString);
                resolve(result);
            }
        });
    }
}
exports.EncryptionService = EncryptionService;

//# sourceMappingURL=encryption_service.js.map
