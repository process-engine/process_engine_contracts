"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CalculatedProperty {
    constructor(schema, datastoreServiceFactory, context, propertyName, getCallback, setCallback) {
        this._schema = undefined;
        this._datastoreServiceFactory = undefined;
        this._datastoreService = undefined;
        this._context = undefined;
        this._remoteValue = undefined;
        this._propertyName = undefined;
        this._getCallback = undefined;
        this._setCallback = undefined;
        this._value = undefined;
        this._schema = schema;
        this._datastoreServiceFactory = datastoreServiceFactory;
        this._context = context;
        this._propertyName = propertyName;
        this._getCallback = getCallback;
        this._setCallback = setCallback;
    }
    get schema() {
        return this._schema;
    }
    get datastoreService() {
        if (!this._datastoreService) {
            this._datastoreService = this._datastoreServiceFactory();
        }
        return this._datastoreService;
    }
    get context() {
        return this._context;
    }
    get remoteValue() {
        return this._remoteValue;
    }
    get propertyName() {
        return this._propertyName;
    }
    get getCallback() {
        return this._getCallback;
    }
    get setCallback() {
        return this._setCallback;
    }
    get value() {
        return this._value;
    }
    async initializeValue() {
    }
    getValue(valueSource) {
        return this._getLastCalculatedValue();
    }
    async getValueLazy(valueSource, context) {
        if (!this.getCallback) {
            throw new Error(`no getter function defined for calculated property "${this.propertyName}"`);
        }
        const getFunction = this.getCallback;
        const calculatedValue = await getFunction.bind(valueSource)(context);
        this._value = calculatedValue;
        return this.value;
    }
    setValue(valueTarget, value) {
        this.setValueLazy(valueTarget, value, undefined);
    }
    async setValueLazy(valueTarget, value, context) {
        if (this.setCallback) {
            const setFunction = this.setCallback;
            await setFunction.bind(valueTarget)(context, value);
            this._value = value;
        }
    }
    updateFromRemote(remoteValue) {
    }
    isDirty() {
        return false;
    }
    isEntityReference() {
        return false;
    }
    isEntityCollectionReference() {
        return false;
    }
    _getLastCalculatedValue() {
        return this.value;
    }
}
exports.CalculatedProperty = CalculatedProperty;

//# sourceMappingURL=calculated_property.js.map
