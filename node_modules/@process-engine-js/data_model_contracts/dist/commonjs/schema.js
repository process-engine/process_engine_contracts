"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Schema {
    constructor(entityKey, schema) {
        this._name = undefined;
        this._entityKey = undefined;
        this._schema = undefined;
        this._name = entityKey.replace('Entity', '');
        this._entityKey = entityKey;
        this._schema = schema;
    }
    get schema() {
        return this._schema;
    }
    get name() {
        return this._name;
    }
    get entityKey() {
        return this._entityKey;
    }
    get namespace() {
        return this.schema.namespace;
    }
    get attributes() {
        return this.schema.attributes || {};
    }
    get expandEntity() {
        return this.schema.expandEntity;
    }
    get expandCollection() {
        return this.schema.expandCollection;
    }
    get indexes() {
        return this.schema.indexes;
    }
    get isAbstract() {
        return this.schema.isAbstract;
    }
    findAttribute(path) {
        const attributes = this.attributes || null;
        const attr = null;
        const schemaPaths = (attributes) ? Object.keys(attributes) : null;
        if (schemaPaths) {
            for (let i = 0; i < schemaPaths.length; i++) {
                const schemaPath = schemaPaths[i];
                if (schemaPath && path && typeof schemaPath === 'string' && typeof path === 'string') {
                    const schemaPathArr = schemaPath.split('.');
                    const pathArr = path.split('.');
                    const n = (schemaPathArr.length < pathArr.length) ? schemaPathArr.length : pathArr.length;
                    let segment1;
                    let segment2;
                    let result = true;
                    for (let j = 1; j <= n; j++) {
                        segment1 = schemaPathArr[schemaPathArr.length - j];
                        segment2 = pathArr[pathArr.length - j];
                        if (segment1 === '*') {
                            break;
                        }
                        if (segment1 !== segment2 && segment1 !== '*') {
                            result = false;
                            break;
                        }
                        if ((j === 0) && (schemaPathArr.length !== pathArr.length)) {
                            if ((schemaPathArr.length > pathArr.length) && (schemaPathArr[0] === '*')) {
                            }
                            else {
                                result = false;
                            }
                        }
                    }
                    if (result) {
                        return attributes[schemaPath];
                    }
                }
            }
        }
        return attr;
    }
}
exports.Schema = Schema;

//# sourceMappingURL=schema.js.map
