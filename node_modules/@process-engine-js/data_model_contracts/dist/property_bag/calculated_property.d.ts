import { IDatastoreService, ICalculatedProperty } from './../interfaces';
import { ISchemaAttribute, ExecutionContext, IFactory } from '@process-engine-js/core_contracts';
export declare class CalculatedProperty implements ICalculatedProperty {
    private _schema;
    private _datastoreServiceFactory;
    private _datastoreService;
    private _context;
    private _remoteValue;
    private _propertyName;
    private _getCallback;
    private _setCallback;
    private _value;
    constructor(schema: ISchemaAttribute, datastoreServiceFactory: IFactory<IDatastoreService>, context: ExecutionContext, propertyName: string, getCallback: Function, setCallback: Function);
    readonly schema: ISchemaAttribute;
    private readonly datastoreService;
    private readonly context;
    private readonly remoteValue;
    readonly propertyName: string;
    private readonly getCallback;
    private readonly setCallback;
    private readonly value;
    initializeValue(): Promise<void>;
    getValue(valueSource: any): any;
    getValueLazy(valueSource: any, context: ExecutionContext): Promise<any>;
    setValue(valueTarget: any, value: any): void;
    setValueLazy(valueTarget: any, value: any, context: ExecutionContext): Promise<void>;
    updateFromRemote(remoteValue: any): void;
    isDirty(): boolean;
    isEntityReference(): boolean;
    isEntityCollectionReference(): boolean;
    private _getLastCalculatedValue();
}
