import { IProperty, IDatastoreService } from './../interfaces';
import { ISchemaAttribute, IFactory, ExecutionContext, IPrivateQueryOptions } from '@process-engine-js/core_contracts';
export declare class Property implements IProperty {
    private _schema;
    private _datastoreServiceFactory;
    private _datastoreService;
    private _context;
    private _onInitCallback;
    private _remoteValue;
    private _value;
    constructor(schema: ISchemaAttribute, datastoreServiceFactory: IFactory<IDatastoreService>, context: ExecutionContext, onInitCallback: Function);
    readonly schema: ISchemaAttribute;
    private readonly datastoreService;
    private readonly context;
    private readonly onInitCallback;
    private remoteValue;
    private value;
    isDirty(): boolean;
    isEntityReference(): boolean;
    isEntityCollectionReference(): boolean;
    initializeValue(): Promise<void>;
    getValue(valueSource: any): any;
    getValueLazy(valueSource: any, context: ExecutionContext, options?: IPrivateQueryOptions): Promise<any>;
    setValue(valueTarget: any, value: any): void;
    updateFromRemote(remoteValue: any): void;
    private _getCurrentValue();
    private _isEntityReference(value);
    private _isEntityCollectionReference(value);
    private _getEntityByReference(value, context, options?);
    private _getEntityCollectionByReference(entityCollectionTypeKey, context, options?);
}
