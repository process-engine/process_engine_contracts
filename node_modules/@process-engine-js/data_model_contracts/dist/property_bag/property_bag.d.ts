import { IDatastoreService, IPropertyBag, IProperties } from './../interfaces';
import { IToPojoOptions, ISchemaAttribute, IFactory, ExecutionContext, IIamService, IPrivateQueryOptions } from '@process-engine-js/core_contracts';
import { IMetadataProvider } from '@process-engine-js/metadata_contracts';
export declare class PropertyBag implements IPropertyBag {
    private _datastoreServiceFactory;
    private _metadataProvider;
    private _iamService;
    private _context;
    private _properties;
    private _propertyChangedCallbacks;
    isNew: boolean;
    constructor(datastoreServiceFactory: IFactory<IDatastoreService>, metadataProvider: IMetadataProvider, iamService: IIamService, context: ExecutionContext);
    private readonly datastoreServiceFactory;
    private readonly metadataProvider;
    private readonly iamService;
    private readonly context;
    readonly properties: IProperties;
    private readonly propertyChangedCallbacks;
    readonly propertyKeys: Array<string>;
    readonly dirtyPropertyKeys: Array<string>;
    initialize(): Promise<void>;
    toPojo(propertyThisContext: any, context: ExecutionContext, options?: IToPojoOptions, propertyKeys?: Array<string>): Promise<any>;
    isDirty(): boolean;
    private _getProperty(propertyName);
    private _setProperty(propertyName, property);
    getProperty(propertyThisContext: any, propertyName: string): any;
    getPropertyLazy(propertyThisContext: any, propertyName: string, context: ExecutionContext, options?: IPrivateQueryOptions): Promise<any>;
    setProperty(propertyThisContext: any, propertyName: string, value: any): void;
    getCalculatedProperty(propertyThisContext: any, propertyName: string, context: ExecutionContext): Promise<any>;
    setCalculatedProperty(propertyThisContext: any, propertyName: string, value: any, context: ExecutionContext): Promise<void>;
    createProperty(schema: ISchemaAttribute, propertyName: string, onInitCallback: Function): void;
    createCalculatedProperty(schema: ISchemaAttribute, propertyName: string, getCallback: Function, setCallback: Function): void;
    updateFromLocal(data: any, propertyThisContext: any): void;
    updateFromRemote(data: any): void;
    private _setPropertyValues(data, fromRemote, propertyThisContext?);
    isAccessAllowed(propertyThisContext: any, propertyKeys: Array<string>, claimActionFragment: string): Promise<boolean>;
    isPropertyAccessAllowed(propertyThisContext: any, propertyName: string, claimActionFragment: string): Promise<boolean>;
}
