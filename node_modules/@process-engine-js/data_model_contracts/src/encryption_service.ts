import {IEncryptionService} from './interfaces';

import * as crypto from 'crypto';
import * as path from 'path';
import * as fs from 'fs';

import * as BluebirdPromise from 'bluebird';

export class EncryptionService implements IEncryptionService {

  public config: any = undefined;

  private get encryptionKey(): string {
    return this.config.encryptionKey;
  }

  public encrypt(value: any): Promise<string> {

    return new BluebirdPromise((resolve, reject) => {

      if (value === null || value === undefined) {
        resolve(value);
      } else {
        const keyBuffer = new Buffer(this.encryptionKey, 'utf8');

        const cipher = crypto.createCipher('aes-128-ctr', keyBuffer);

        const valueString = JSON.stringify(value);
        const valueBuffer = new Buffer(valueString);

        const encrypted = cipher.update(valueBuffer);

        const finalBuffer = Buffer.concat([encrypted, cipher.final()]);

        const result = finalBuffer.toString('hex');

        resolve(result);
      }
    });
  }

  public decrypt(value: string): Promise<any> {

    return new BluebirdPromise((resolve, reject) => {

      if (value === null || value === undefined) {
        resolve(value);
      } else {

        const keyBuffer = new Buffer(this.encryptionKey, 'utf8');

        const decipher = crypto.createDecipher('aes-128-ctr', keyBuffer);

        const valueBuffer = new Buffer(value, 'hex');

        const decrypted = decipher.update(valueBuffer);

        const finalBuffer = Buffer.concat([decrypted, decipher.final()]);

        const finalString = finalBuffer.toString('utf8');

        const result = JSON.parse(finalString);

        resolve(result);
      }
    });
  }
}
