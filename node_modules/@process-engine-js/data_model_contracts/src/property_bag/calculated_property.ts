import {IProperty, IDatastoreService, ICalculatedProperty} from './../interfaces';
import {ISchemaAttribute, ExecutionContext, IFactory} from '@process-engine-js/core_contracts';

export class CalculatedProperty implements ICalculatedProperty {

  private _schema: ISchemaAttribute = undefined;
  private _datastoreServiceFactory: IFactory<IDatastoreService> = undefined;
  private _datastoreService: IDatastoreService = undefined;
  private _context: ExecutionContext = undefined;
  private _remoteValue: any = undefined;
  private _propertyName: string = undefined;
  private _getCallback: Function = undefined;
  private _setCallback: Function = undefined;
  private _value: any = undefined;

  constructor(schema: ISchemaAttribute, datastoreServiceFactory: IFactory<IDatastoreService>, context: ExecutionContext, propertyName: string, getCallback: Function, setCallback: Function) {
    this._schema = schema;
    this._datastoreServiceFactory = datastoreServiceFactory;
    this._context = context;
    this._propertyName = propertyName;
    this._getCallback = getCallback;
    this._setCallback = setCallback;
  }

  public get schema(): ISchemaAttribute {
    return this._schema;
  }

  private get datastoreService(): IDatastoreService {
    if (!this._datastoreService) {
      this._datastoreService = this._datastoreServiceFactory();
    }
    return this._datastoreService;
  }

  private get context(): ExecutionContext {
    return this._context;
  }

  private get remoteValue(): any {
    return this._remoteValue;
  }

  public get propertyName(): string {
    return this._propertyName;
  }

  private get getCallback(): Function {
    return this._getCallback;
  }

  private get setCallback(): Function {
    return this._setCallback;
  }

  private get value(): any {
    return this._value;
  }

  public async initializeValue(): Promise<void> {
  }

  public getValue(valueSource: any): any {
    return this._getLastCalculatedValue();
  }

  public async getValueLazy(valueSource: any, context: ExecutionContext): Promise<any> {
    if (!this.getCallback) {
      throw new Error(`no getter function defined for calculated property "${this.propertyName}"`);
    }

    const getFunction = this.getCallback;

    const calculatedValue = await getFunction.bind(valueSource)(context);
    this._value = calculatedValue;

    return this.value;
  }

  public setValue(valueTarget: any, value: any): void {
    this.setValueLazy(valueTarget, value, undefined);
  }

  public async setValueLazy(valueTarget: any, value: any, context: ExecutionContext): Promise<void> {
    if (this.setCallback) {
      const setFunction = this.setCallback;

      await setFunction.bind(valueTarget)(context, value);
      this._value = value;
    }
  }

  public updateFromRemote(remoteValue: any): void {
  }

  public isDirty(): boolean {
    return false;
  }

  public isEntityReference(): boolean {
    return false;
  }

  public isEntityCollectionReference(): boolean {
    return false;
  }

  private _getLastCalculatedValue(): any {
    return this.value;
  }
}