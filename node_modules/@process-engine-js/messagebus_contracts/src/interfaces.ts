import {Message} from './message';
import {ExecutionContext, IEntity, IEntityReference, HttpMethod, IPojoEntityReference} from '@process-engine-js/core_contracts';


export interface IMessageBusAdapter {
  initialize(server: any): Promise<void>;
  isMaster: boolean;
  publish(channel: string, message: any): Promise<any>;
  subscribe(channel: string, callback: Function): Promise<any>;
}

export interface IMessageBusService {
  isMaster: boolean;
  publish(channel: string, message: IMessage): Promise<any>;
  subscribe(channel: string, callback: Function): Promise<IMessageSubscription>;
  respond(channel: string, callback: Function): Promise<IMessageSubscription>;
  request(channel: string, message: IMessage): Promise<IMessage>;
  createEntityMessage(data: any, source: IEntity, context: ExecutionContext): IEntityMessage;
  createDatastoreMessage(options: IDatastoreMessageOptions, context: ExecutionContext, data?: any): IDatastoreMessage;
  createDataMessage(data: any, context: ExecutionContext): IDataMessage;
  createErrorMessage(errorMessage: string, error: any, context: ExecutionContext): IErrorMessage;
  initialize(): Promise<void>;
  verifyMessage(message: IMessage): Promise<void>;
}

export interface IMessageSubscription {
  cancel(): void;
}

export interface IDatastoreMessageOptions {
  action: HttpMethod;
  typeName?: string;
  method?: string;
  id?: string;
  options?: any;
}

export interface IDatastoreMessage extends IDataMessage, IDatastoreMessageOptions {

}

export interface IEntityMessage extends IDataMessage {
  source: IPojoEntityReference;
}

export interface IDataMessage extends IMessage {
  data: any;
}

export interface IErrorMessage extends IMessage {
  error: any;
  message: string;
}

export interface IMessage {
  metadata: IMessageMetadata;
}

export interface IMessageMetadata {
  id: string;
  applicationId: string;
  token: string;
  context?: ExecutionContext;
  response?: string;
}
