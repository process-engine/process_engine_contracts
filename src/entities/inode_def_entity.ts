import {ExecutionContext, IEntity} from '@essential-projects/core_contracts';
import {IEntityCollection, IEntityType} from '@essential-projects/data_model_contracts';
import {IFeature} from '@essential-projects/feature_contracts';
import {BpmnType, TimerDefinitionType} from '../index';
import {IBoundaryEventEntity} from './event/index';
import {ILaneEntity} from './index';
import {IProcessDefEntity} from './process/index';

export interface INodeDefEntity extends IEntity {
  name: string;
  key: string;
  processDef: IProcessDefEntity;
  lane: ILaneEntity;
  type: BpmnType;
  extensions: any;
  attachedToNode: INodeDefEntity;
  events: any;
  script: string;
  eventType: string;
  cancelActivity: boolean;
  subProcessKey: string;
  subProcessDef: INodeDefEntity;
  mapper: string;
  timerDefinitionType: TimerDefinitionType;
  timerDefinition: string;
  startContext: string;
  startContextEntityType: string;
  signal: string;
  message: string;
  condition: string;
  features: Array<IFeature>;
  persist: boolean;
  errorName: string;
  errorCode: string;
  getProcessDef(context: ExecutionContext): Promise<IProcessDefEntity>;
  getLane(context: ExecutionContext): Promise<ILaneEntity>;
  getAttachedToNode(context: ExecutionContext): Promise<INodeDefEntity>;
  getLaneRole(context: ExecutionContext): Promise<string>;
  getSubProcessDef(context: ExecutionContext): Promise<INodeDefEntity>;
  getBoundaryEvents(context: ExecutionContext): Promise<IEntityCollection<IBoundaryEventEntity>>;
}
